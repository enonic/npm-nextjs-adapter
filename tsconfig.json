{
  "compilerOptions": {
    "target": "ES6",
    "lib": [
      // Compilation and tests could be split into server and client parts, but
      // since fetch and Headers exist both in Node 18+ and dom env, lets keep
      // dom and dom.iterable for now.
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "allowSyntheticDefaultImports": true,
    "module": "ESNext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,

    "jsx": "preserve",
    "outDir": "dist",
    "declaration": true,
    "sourceMap": true

    // We have done Triple-Slash Directives where needed instead:
    // "types": [
    //   "node",
    //   "react",
    //   "react-dom"
    // ],
  },

  // Specifies an allowlist of files to include in the program. An error occurs
  // if any of the files canâ€™t be found.
  "files": [
    "src/index.ts",
    "src/client.ts",
    "src/server.ts",
    "src/baseMappings.ts"
  ],

  // Specifies an array of filenames or patterns to include in the program.
  // These filenames are resolved relative to the directory containing the
  // tsconfig.json file.
  "include": [
    "src/views/**/*.ts*",
    "src/utils/**/*.ts*"
  ],

  // Specifies an array of filenames or patterns that should be skipped when
  // resolving include.
  // Important: exclude only changes which files are included as a result of the
  // include setting. A file specified by exclude can still become part of your
  // codebase due to an import statement in your code, a types inclusion, a
  // /// <reference directive, or being specified in the files list.
  // It is not a mechanism that prevents a file from being included in the
  // codebase - it simply changes what the include setting finds.
  "exclude": [],

  "ts-node": {
    "moduleTypes": {
      "jest.config.ts": "cjs"
    }
  }
}
